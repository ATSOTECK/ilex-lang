use <random>
use <math>

assert([] == [])

arr := [1, 'two', 3]
println(arr[1])
println(arr[1][1])

str := 'hello'
println(str[-4])

arr[1] = [12, 'yeet', false, null]
println(arr[1])
println(arr)

str[-4] = 'yeet'[3]
str[str.len() - 1] = 'yeet' // Grabs the first character.
println(str[-4])
println(str)

arr[0] += 14
println(arr[0])
arr[1][3] ??= 42
println(arr)

text := "This is some text."
println(text[:1])
println(text[:7])
println(text[:text.len()])
println(text[0:])
println(text[5:])
some ::= text[8:12]
assert(some == 'some')
println(some)

long := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]
println(long[:6])
println(long[0:])
println(long[0:6])
println(long[3:6])
println(long.len())

str = long.toString()
println(str)

long.push(11)
println(long)
long.pop()
println(long)
long.erase(2, 3)
println(long)
long.remove(7)
println(long)
long.insert(2, 42)
println(long)
println(long.contains(42))
println(long.contains(44))

long.insert(5, 42)
println(long)
println(long.indexOf(42))
println(long.indexOf(42, 3))
println(long.indexOf(42, 6))
println(long.indexOf(42, 30))

newLine()
println('Choosing from:', long)
for (i := 0; i < 10; i++) {
    num ::= random::choose(long)
    println('chose', num)
}

newLine()
println('max', math::max(long))
println('min', math::min(long))

newLine()
println(long)
long.sort()
println(long)

long.sort(false)
println(long)

long.reverse()
println(long)

newLine()
println(long.join())
println(long.join('-'))
println(long.join('/'))
println(long.join(' yeet '))
println(long.join(' | '))
println([].join('empty'))

long.clear()
println(long)
newLine()

vLong := []

vLong.make(15)
println(vLong)

vLong.make(15, true)
println(vLong)

vLong.fill(false)
println(vLong)

vLong.fill()
println(vLong)

fn double(num) {
    println('In double.', num * 2)
}

println(typeof(double))

small ::= [1, 2, 3]
small.forEach(double)

fn square(num) {
    return num ** 2
}

newSmall ::= small.map(square)

fn even(num) {
    return num % 2 == 0
}

onlyEven ::= newSmall.filter(even)
println(small, newSmall, onlyEven)

assert(small != newSmall)
assert(small == small)

tmp ::= [1, 2, 3]
assert(small == tmp)

mostlyEven ::= [1, 2, 3, 4, 6, 8, 10]
println('mosly even', mostlyEven)
mostlyEven.forEach(fn |num| println('This is', num))
println('square', mostlyEven.map(fn |x| x ** 2))
println('even', mostlyEven.filter(fn |x| x % 2 == 0))
println('odd', mostlyEven.filter(fn |x| -> {
    return x % 2 != 0
}))

y ::= mostlyEven.reduce(fn |n, item| n + item)
assert(y == 34)
z ::= mostlyEven.reduce(fn |n, item| n + item, 100)
assert(z == 134)

// Not array related but I figured I'd test all anon functions at once.
anon := fn -> println('Hi from anon function!')
anon()

anon = fn -> {
    println('1st', mostlyEven)
    println('2nd', tmp)
}
anon()

a1 ::= [0, [1, 4], 2, 3]
a2 := a1

println(a1, a2)

a1[0] = 12

newLine()
println(a1, a2)

a2 = a1.shallowCopy()
a1[0] = 0

newLine()
println(a1, a2)

a1[1][0] = 12

newLine()
println(a1, a2)

a2 = a1.deepCopy()
a1[1][0] = 1

newLine()
println(a1, a2)

allTruthy ::= [true, true, true, 1, 'yeet']
allFalsy ::= [false, null, false, 0, '', []]
someTruthy ::= [false, null, false, 1, true, '', []]

assert(allTruthy.allTruthy() == true)
assert(allTruthy.noneTruthy() == false)
assert(allTruthy.anyTruthy() == true)

assert(allFalsy.allTruthy() == false)
assert(allFalsy.noneTruthy() == true)
assert(allFalsy.anyTruthy() == false)

assert(someTruthy.allTruthy() == false)
assert(someTruthy.noneTruthy() == false)
assert(someTruthy.anyTruthy() == true)

assert(someTruthy.allTruthy(0, 3) == false)
assert(someTruthy.noneTruthy(0, 3) == true)
assert(someTruthy.anyTruthy(0, 3) == false)

assert(someTruthy.allTruthy(3, 5) == true)
assert(someTruthy.noneTruthy(3, 5) == false)
assert(someTruthy.anyTruthy(3, 5) == true)

assert(someTruthy.allTruthy(5) == false)
assert(someTruthy.noneTruthy(5) == true)
assert(someTruthy.anyTruthy(5) == false)

allEven ::= [2, 4, 6, 8, 10]
noneEven ::= [1, 3, 5, 7, 9]
someEven ::= [1, 3, 5, 7, 8, 10, 9, 19]

assert(allEven.allOf(fn |x| x % 2 == 0) == true)
assert(allEven.noneOf(fn |x| x % 2 == 0) == false)
assert(allEven.anyOf(fn |x| x % 2 == 0) == true)

assert(noneEven.allOf(fn |x| x % 2 == 0) == false)
assert(noneEven.noneOf(fn |x| x % 2 == 0) == true)
assert(noneEven.anyOf(fn |x| x % 2 == 0) == false)

assert(someEven.allOf(fn |x| x % 2 == 0) == false)
assert(someEven.noneOf(fn |x| x % 2 == 0) == false)
assert(someEven.anyOf(fn |x| x % 2 == 0) == true)

assert(allEven.allOf(fn |x| x % 2 == 0, 1, 4) == true)
assert(allEven.noneOf(fn |x| x % 2 == 0, 1, 4) == false)
assert(allEven.anyOf(fn |x| x % 2 == 0, 1, 4) == true)

assert(noneEven.allOf(fn |x| x % 2 == 0, 1, 4) == false)
assert(noneEven.noneOf(fn |x| x % 2 == 0, 1, 4) == true)
assert(noneEven.anyOf(fn |x| x % 2 == 0, 1, 4) == false)

assert(someEven.allOf(fn |x| x % 2 == 0, 4, 6) == true)
assert(someEven.allOf(fn |x| x % 2 == 0, 4, 7) == false)
assert(someEven.noneOf(fn |x| x % 2 == 0, 4, 6) == false)
assert(someEven.anyOf(fn |x| x % 2 == 0, 4, 6) == true)

println("Array test \033[32mpassed\033[0m in", milliseconds(), "ms!")
