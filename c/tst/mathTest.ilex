use { pi, e, max, min, cos, sin } from <math>
use <math>
use { version } from <ilex>

println("e", e)
println("math::e", math::e)

x := min(12, 5)
println('Ilex version: {version()}')

sqrt12 := math::sqrt(12)
assert(sqrt12 > 3.4 && sqrt12 < 3.5) // Close enough.
println("math::$file", math::$file)

println("pi", math::pi)
println("2/sqrt(pi)", math::_2_sqrtpi)

M := math
two := M::sqrt(4)
assert(two == 2)

num := 0;
assert(num == 0);

num += 10;
assert(num == 10);

num -= 10;
assert(num == 0);

num = 1;
num *= 100;
assert(num == 100);

num /= 10;
assert(num == 10);

num++;
assert(num == 11);

num--;
assert(num == 10);

num = 2;
assert(num == 2);

num **= 2;
assert(num == 4);

num = 10;
assert(num == 10);

num %= 3;
assert(num == 1);

num = 1;
assert(num == 1);

num = num + 1;
assert(num == 2);

num = num - 1;
assert(num == 1);

num = num * 10;
assert(num == 10);

num = num / 10;
assert(num == 1);

num = 2;
assert(num == 2);

num = num ** 2;
assert(num == 4);

num = 10;
assert(num == 10);

num = num % 3;
assert(num == 1);

num = 5
assert(~num == -6)

num = -3
assert(~num == 2)

a ::= 5
b ::= 3
assert(a & b == 1)
assert(a | b == 7)
assert(a ^ b == 6)

z := 5
z &= 3
assert(z == 1)

z = 5
z |= 3
assert(z == 7)

z = 5
z ^= 3
assert(z == 6)

assert(5 << 2 == 20)
assert(5 >> 2 == 1)
assert(-5 >> 2 == -2)

assert(0xF == 15)
assert(0XF == 15)
assert(1_5 == 15)
assert(1e2 == 100)
assert(0o10 == 8)
assert(0O10 == 8)
assert(0q10 == 8)
assert(0Q10 == 8)

println("sin(pi) =", sin(pi))
println("cos(pi) =", cos(pi))

assert(sin(pi) == 0)
assert(cos(pi) == -1)

println("\nMath test passed in", milliseconds(), "ms!\n")

assert(num == 2, "This should fail.");
