abstract class Animal {
    abstract fn sayHi(name)
}

class Cat : Animal {
    fn sayHi(name) {
        println("hi " + name);
    }
}

var cat = Cat();
cat.name = "Kiikii";

println(cat.name);

var sayHi = cat.sayHi;

sayHi("Skyler");
cat.sayHi('yeet')
/*
class Nested {
    method() {
        fn function() {
            println(this);
        }

        function();
    }
}

Nested().method();

class CoffeeMaker {
    init(coffee) {
        this.coffee = coffee;
    }

    brew() {
        println("Enjoy your cup of " + this.coffee + ".");

        // No reusing the grounds!
        this.coffee = null;
    }
}

var maker = CoffeeMaker("coffee and chicory");
maker.brew();

class Oops {
    init() {
        fn f() {
            println("not a method");
        }

        this.field = f;
    }
}

var oops = Oops();
oops.field();

class Person {
    var name
    age := 0
    var id
    
    private var ssn
    const type = 'person'
    other ::= 'yeet'
    
    init(name, age, foo) {
        .name = name
        .age = age
        id = foo
    }
    
    private someFunc() {
        
    }
}

class Dude < Person {
    init(name, age, foo, stuff) {
        super.init(name, age, foo)
    }
}
*/