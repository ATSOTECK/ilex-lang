assert({} == {})

map ::= { 'key1' : 'yeet', 'key2' : 12 }
mapSame ::= { 'key1' : 'yeet', 'key2' : 12 }
mapDifferentOrder ::= { 'key2' : 12, 'key1' : 'yeet' }

assert(map == mapSame)
assert(map == mapDifferentOrder)

assert(map['key1'] == 'yeet')
assert(map['key2'] == 12)
assert(map['key3'] == null)
assert(map.size() == 2)
assert(map.keys().len() == 2)

map['key3'] = 'woo'

assert(map['key1'] == 'yeet')
assert(map['key2'] == 12)
assert(map['key3'] == 'woo')
assert(map.size() == 3)
assert(map.keys().len() == 3)

map2 ::= {}
assert(map2 == {})
assert({} == map2)
assert(map2.size() == 0)
assert(map2.isEmpty() == true)

map3 ::= { 'key1': 1, 'key2': 12, 'key3': 'yeet' }
map3.forEach(fn |key, value| -> {
    println(key, value)
})

map4 ::= { key1: 'value1', 'key2': 1, key3: 3 }
assert(map4.key1 == 'value1')
assert(map4['key1'] == 'value1')
assert(map4.get('key1') == 'value1')

assert(map4.key2 == 1)
assert(map4['key2'] == 1)
assert(map4.get('key2') == 1)

assert(map4.key3 == 3)
assert(map4['key3'] == 3)
assert(map4.get('key3') == 3)

println("Map test \033[32mpassed\033[0m in", milliseconds(), "ms!")
