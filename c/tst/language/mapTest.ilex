use { milliseconds } from <ilex>
use <fmt>

assert({} == {})
assert({} != [])

map ::= { 'key1' : 'yeet', 'key2' : 12 }
mapSame ::= { 'key1' : 'yeet', 'key2' : 12 }
mapDifferentOrder ::= { 'key2' : 12, 'key1' : 'yeet' }

assert(map == mapSame)
assert(map == mapDifferentOrder)

assert(map['key1'] == 'yeet')
assert(map['key2'] == 12)
assert(map['key3'] == null)
assert(map.size() == 2)
assert(map.keys().len() == 2)

map['key3'] = 'woo'

assert(map['key1'] == 'yeet')
assert(map['key2'] == 12)
assert(map['key3'] == 'woo')
assert(map.size() == 3)
assert(map.keys().len() == 3)

map2 ::= {}
assert(map2 == {})
assert({} == map2)
assert(map2.size() == 0)
assert(map2.isEmpty() == true)

map3 ::= { 'key1': 1, 'key2': 12, 'key3': 'yeet' }
map3.forEach(fn |key, value| -> {
    println(key, value)
})

map4 ::= { key1: 'value1', 'key2': 1, key3: 3 }
assert(map4.key1 == 'value1')
assert(map4['key1'] == 'value1')
assert(map4.get('key1') == 'value1')

assert(map4.key2 == 1)
assert(map4['key2'] == 1)
assert(map4.get('key2') == 1)

assert(map4.key3 == 3)
assert(map4['key3'] == 3)
assert(map4.get('key3') == 3)

map4.key3 = 12
assert(map4.key3 == 12)

fn takesMap(cfg) {
    assert(cfg.port == 8000)
}

takesMap({ port: 8000 })

emptyMap ::= {}
// assert(emptyMap.key == null) // This will cause a runtime error. Should it?
assert(emptyMap['key'] == null)
assert(emptyMap.get('key') == null)
assert(emptyMap.get('key', 'yeet') == 'yeet')

nestedMap ::= { a: { one: 1 } }
assert(nestedMap.a.one == 1)

map5 ::= { key1: "bla" }
assert(map5.key1 == "bla")
map5.clear()
assert(map5 == {})
assert({} == map5)

map6 ::= { a: 'a' }
map7 ::= { b: 'b' }
map6.update(map7)
assert(map6 == { a: 'a', b: 'b' }, "Merge failed")

map8 ::= { a: 'a' }
map9 ::= { a: '1', b: '2' }
map8.update(map9)
assert(map8 == map9, "Merge failed")

map10 := { a: 'a' }
map10.merge(map9)
assert(map10 == { a: 'a', b: '2' })

println("Map test {fmt::green}passed{fmt::reset} in {milliseconds()} ms!")

println('This test should {fmt::red}fail{fmt::reset} now.')
map4.key5 = "bla"
