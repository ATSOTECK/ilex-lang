/-
arr := [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
numCount := 0
{
    for (i := 0; i < 100; i++) {
        num := arr.reduce(fn |n, itm| n + itm)
        println(num, numCount++)
    }
}
-/

arr := ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]
arr.forEach(fn |itm| println('from script', itm))

/-
hereCount := 0

class Elf {
    var carrying = []
    var id
    var totalCal = 0
    
    fn init(foods, id) {
        this.carrying = foods
        // this.id = id
    }
    
    fn totalCal() {
        if (this.totalCal == 0) {
            this.totalCal = this.carrying.reduce(fn |n, item| n + item)
            println('here', hereCount++)
        }
        
        return this.totalCal
    }
    
    fn id() {
        return this.id
    }
}

fn elfWithMost(elves) {
    max := 0
    var answer
    
    elves.forEach(fn |elf| -> {
        if (elf.totalCal() > max) {
            max = elf.totalCal()
            answer = elf
        }
    })
    
    return answer
}

elves ::= []

with('dayOneInput.txt', 'r') {
    str := file.readln()
    calList ::= []
    id := 0
    
    while (str != null) {        
        str = file.readln()
        
        if (str == '\n') {
            elves.push(Elf(calList.deepCopy(), id))
            id++
            calList.clear()
        } elif (str != null) {
            calList.push(str.toNumber())
        }
    }
}

// answerElf ::= elfWithMost(elves)
// println(answerElf)

for (i := 0; i < elves.len(); i++) {
    println(elves[i])
}

elves.forEach(fn |elf| println(elf)) // causes crash on 8th element

// println('Index', answer[0], 'is the elf with the most calories. Carrying', answer[1])
-/
