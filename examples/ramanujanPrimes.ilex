use { ceil, floor, log } from <math>
use <ilex>

var count = []

fn primeCounter(limit) {
    count.make(limit, 1)
    
    if limit > 0 {
        count[0] = 0
    }
    
    if limit > 1 {
        count[1] = 0
    }
    
    for i := 4; i < limit; i += 2 {
        count[i] = 0
    }
    
    p := 3
    sq := 9
    while sq < limit {
        if count[p] != 0 {
            q := sq
            while q < limit {
                count[q] = 0
                q += p * 2
            }
        }
        
        sq += (p + 1) * 4
        p += 2
    }
    
    sum := 0
    for i := 0; i < limit; i++ {
        sum += count[i]
        count[i] = sum
    }
}

fn primeCount(n) {
    return (n < 1) ? 0 : count[n]
}

fn ramanujanMax(n) {
    return ceil(4 * n * log(4 * n))
}

fn ramanujanPrime(n) {
    if n == 1 {
        return 2
    }
    
    max ::= ramanujanMax(n)
    for i := max; i >= 2 * n; i-- {
        if (i % 2 == 1) {
            continue
        }
        
        if primeCount(i) - primeCount(floor(i / 2)) < n {
            return i + 1
        }
    }
    
    return 0
}

primeCounter(1 + ramanujanMax(1e6))
println('The first 100 Ramanujan primes are:')
for i := 1; i <= 100; i++ {
    print(ramanujanPrime(i))
    if i < 100 {
        print(', ')
    }
    
    if i % 10 == 0 {
        println()
    }
}

println('The 1,000th Ramanujan prime is {ramanujanPrime(1_000)}')
println('The 10,000th Ramanujan prime is {ramanujanPrime(10_000)}')
println('The 100,000th Ramanujan prime is {ramanujanPrime(100_000)}')
println('The 1,000,000th Ramanujan prime is {ramanujanPrime(1e6)}')
println('Took {ilex::seconds()} seconds.')
print('Using ') ilex::printMemUsage()
println('Next gc at: {ilex::nextGC()}')
println('GC was run {ilex::gcRuns()} time(s).')
